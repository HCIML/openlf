cmake_minimum_required (VERSION 2.8.3)
project (OpenLF)

# The version number.
set (OpenLF_VERSION_MAJOR 1)
set (OpenLF_VERSION_MINOR 0)

include_directories(./src/)
include_directories(./includes/)

set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build/test_release)

# configure a header file to pass some of the CMake settings
# to the source code
find_package(OpenGL)
find_package(HDF5)
find_package(Vigra)
find_package(OpenMP)
find_package(OpenCV REQUIRED )
find_package(Boost REQUIRED )

find_library( CPPUNIT_LIBRARY NAMES cppunit cppunit_dll
            PATHS   ${FOO_PREFIX}/lib
                    /usr/lib
                    /usr/lib64
                    /usr/local/lib
                    /usr/local/lib64
            PATH_SUFFIXES release )

MESSAGE(STATUS " libraries : ${CPPUNIT_LIBRARY}")

MESSAGE(STATUS " boost libraries : ${Boost_LIBRARIES}")

file(GLOB_RECURSE SRCS ./src/*.cpp)
file(GLOB_RECURSE HDRS ./includes/*.hpp)

INCLUDE_DIRECTORIES( ${OPENCV_INCLUDE_DIR} )
INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIR})
INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
ADD_DEFINITIONS(${HDF5_CPPFLAGS})

# add the binary tree to the search path for include files
# so that we will find TutorialConfig.h
include_directories("${PROJECT_SOURCE_DIR}")

# conditional include openmp
if(OPENMP_FOUND)
message("OPENMP FOUND")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()


# uncomment this for develop building
#set(CMAKE_CXX_FLAGS "-g -O -Wall -Wshadow -Wextra -std=c++0x -march=native")

# uncomment this for release build to get best code optimization
set(CMAKE_CXX_FLAGS "-g -O -Wall -Wshadow -Wextra  -std=c++0x -O3 -march=native")

execute_process(COMMAND ${CMAKE_CURRENT_LIST_DIR}/configure)

# add the executable

    message( "INFO: RELEASE BUILD" )

add_custom_target(
	    Configure
	    COMMAND ${CMAKE_CURRENT_LIST_DIR}/configure ${CMAKE_CURRENT_LIST_FILE}
)

#WORKFLOW: demo 
add_executable(OpenLF_demo
	./workflows/demo/demo.cpp
	./workflows/demo/My4DOperator.cpp
	${SRCS} ${HDRS})
    target_link_libraries(OpenLF_demo hdf5_cpp hdf5 vigraimpex boost_system boost_filesystem boost_regex 
	${OpenCV_LIBS} ${HDF5_LIBRARIES} ${CPPUNIT_LIBRARY})

add_dependencies(OpenLF_demo Configure)




